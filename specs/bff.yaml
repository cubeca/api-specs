openapi: 3.0.3
info:
  title: BFF - CUBE DAO Canada

  # Until the video platform MVP is live, only count up the patch version,
  # i.e. 0.0.x --> 0.0.(x+1)
  # In general, use semantic versioning: http://semver.org/
  version: '0.0.1'
  
  description: |
    # BFF (Backend-for-Frontend)

    The BFF API caters to each and every whim of the Frontend,
    i.e. it receives, bundles, packages and formats data exactly
    as the Frontend needs it.

    The actual implementation of the BFF will then in turn translate
    the Frontend traffic into whatever the specialized and semantically
    modular "real" backend services understand.

  contact:
    email: raphaelhuefner@gmail.com
    url: 'https://github.com/cubeca'
  license:
    name: UNLICENSED
    url: 'https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license'

tags:
  - name: User
    description: User stuff, like view profile etc.
  - name: content
    description: Content (e.g. videos, pdfs, audio, etc)

servers:
  - url: http://localhost:{port}/{basePath}/{apiVersion}
    description: Local development
    variables:
      port:
        enum:
          - '8080'
          - '8081'
          - '8082'
          - '8083'
          - '8084'
          - '8085'
          - '18080'
          - '18081'
          - '18082'
          - '18083'
          - '18084'
          - '18085'
        default: '8080'
      basePath:
        default: bff/api
      apiVersion:
        default: v1

  - url: https://bff.{stage}.cubecommons.ca/{apiVersion}
    description: CUBE's shared API server instances, including production
    variables:
      stage:
        enum:
          # # Both UNSTABLE and STAGING are stages in the development environment
          - unstable
          # - staging

          # # Both SANDBOX and LIVE are stages in the production environment
          # - sandbox
          # - live
        default: unstable
        description: deployment stage
      apiVersion:
        default: v1

# # Disable this temporarily for easier adoption of API client library.
# security: 
#   - jwt_logged_in: []

paths:
  '/echo':
    post:
      operationId: echo
      summary: Simple echo request
      description: Simple echo request.
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/echo/echo_request.json
            example:
              $ref: ../schemas/echo/echo_request.example.json
        description: Simple echo request
        required: true
      responses:
        '200':
          description: Simple echo response
          content:
            application/json:
              schema:
                $ref: ../schemas/echo/echo_response.json
              example:
                $ref: ../schemas/echo/echo_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/content':
    get:
      operationId: content_list
      summary: List content
      description: List content.
      tags:
        - content
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: page_size
          in: query
          description: Number of items on a page
          required: true
          schema:
            type: integer
        - name: category
          in: query
          description: Content category
          required: false
          schema:
            type: string
            enum:
              - all
              - video
              - audio
              - vr
              - pdf
              - digital-publications
              - talks
              - performances
              - cultural-teachings

              # Hack to get the Frontend loading for MVP
              - featured
            default: all
        - name: type
          in: query
          description: Content type
          required: false
          schema:
            type: string
            enum:
              - video
              - audio
              - pdf
            default: video
        - name: nation
          in: query
          description: Related to Nation/Country
          required: false
          schema:
            type: string
            enum:
              - CA
            default: CA
        - name: creator
          in: query
          description: Created by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/list_response.json
              example:
                $ref: ../schemas/content/list_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    post:
      operationId: add_content
      summary: Add content
      description: Add content.
      tags:
        - ContentFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/content/add_content_request.json
            example:
              $ref: ../schemas/content/add_content_request.example.json
        description: Add content
        required: true
      responses:
        '200':
          description: Add content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/add_content_response.json
              example:
                $ref: ../schemas/content/add_content_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/content/{contentId}':
    get:
      operationId: content_details
      summary: Get content details
      description: Get content details.
      tags:
        - content
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content details
          content:
            application/json:
              schema:
                $ref: ../schemas/content/detail_response.json
              example:
                $ref: ../schemas/content/detail_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/profiles/{profileId}':
    get:
      operationId: profile_details
      summary: Get profile details
      description: Get profile details.
      tags:
        - User
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Profile details
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/detail_response.json
              example:
                $ref: ../schemas/profiles/detail_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    put:
      operationId: profile_section_update
      summary: Update Profile section
      description: Update Profile section.
      tags:
        - User
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/profiles/update_section_request.json
            example:
              $ref: ../schemas/profiles/update_section_request.example.json
        description: Profile Section Update
        required: true
      responses:
        '200':
          description: Update Profile Section Response
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/update_section_response.json
              example:
                $ref: ../schemas/profiles/update_section_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/profiles/{profileId}/update-logo':
    post:
      operationId: profile_logo_update
      summary: Update Profile logo
      description: Update Profile logo.
      tags:
        - User
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/profiles/update_logo_request.json
            example:
              $ref: ../schemas/profiles/update_logo_request.example.json
        description: Profile Logo Update
        required: true
      responses:
        '200':
          description: Update Profile Logo Response
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/update_logo_response.json
              example:
                $ref: ../schemas/profiles/update_logo_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/collaborators':
    get:
      operationId: collaborator_list
      summary: List collaborators
      description: List collaborators.
      tags:
        - content
      responses:
        '200':
          description: Collaborator List
          content:
            application/json:
              schema:
                $ref: ../schemas/collaborators/list_response.json
              example:
                $ref: ../schemas/collaborators/list_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

components:
  responses:
    error400:
      description: Error 400
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.400.json
    error401:
      description: Error 401
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.401.json
    error403:
      description: Error 403
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.403.json
    error404:
      description: Error 404
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.404.json
    error405:
      description: Error 405
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.405.json
    error406:
      description: Error 406
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.406.json
    error422:
      description: Error 422
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.422.json
    error429:
      description: Error 429
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.429.json
    error500:
      description: Error 500
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.500.json
    error503:
      description: Error 503
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.503.json

  # # Disable this temporarily for easier adoption of API client library.
  # securitySchemes:
  #   jwt_logged_in:
  #     type: http
  #     description: This API uses JWT. Either anonymous JWT or logged-in JWT via username and password.
  #     scheme: bearer
  #     bearerFormat: JWT
