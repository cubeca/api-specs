openapi: 3.0.3
info:
  title: BFF - The Association for Cube Commons Canada

  # BEWARE: This is just a placeholder and will be set by the package publishing scripts.
  # In general, use semantic versioning: http://semver.org/
  version: '0.0.1'
  
  description: |
    # BFF (Backend-for-Frontend)

    The BFF API caters to each and every whim of the Frontend,
    i.e. it receives, bundles, packages and formats data exactly
    as the Frontend needs it.

    The actual implementation of the BFF will then in turn translate
    the Frontend traffic into whatever the specialized and semantically
    modular "real" backend services understand.

  contact:
    email: tech@cubecommons.ca
    url: https://github.com/cubeca
  license:
    name: UNLICENSED
    url: https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license

tags:
  - name: Auth
    description: Login, forgot password, etc.
  - name: User
    description: User stuff
  - name: Profile
    description: Profile stuff
  - name: Content
    description: Content (e.g. videos, pdfs, audio, etc)
  - name: ContentFiles
    description: Just to keep the client lib consistent
  - name: Upload
    description: All communications to do with uploading

servers:
  - url: https://bff-{stage}.cubecommons.ca
    description: CUBE's shared API server instances, including production
    variables:
      stage:
        enum:
          # # DEV, UNSTABLE and STAGING are stages in the development environment
          - dev
          - unstable
          # - staging

          # # Both SANDBOX and LIVE are stages in the production environment
          # - sandbox
          # - live
        default: dev
        description: deployment stage

  - url: http://localhost:{port}/{basePath}
    description: Local development
    variables:
      port:
        enum:
          - '8080'
          - '8081'
          - '8082'
          - '8083'
          - '8084'
          - '8085'
          - '18080'
          - '18081'
          - '18082'
          - '18083'
          - '18084'
          - '18085'
        default: '8080'
      basePath:
        default: bff

security: 
  - jwt_logged_in: []

paths:
  '/auth/anonymous':
    post:
      operationId: anonymous_JWT
      summary: Acquire a JWT as an anonymous user.
      description: Acquire a JWT as an anonymous user.
      tags:
        - Auth

      # While we are logging in we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      requestBody:
        description: Anonymous JWT request
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/anonymous_jwt_request.json
            example:
              $ref: ../schemas/auth/anonymous_jwt_request.example.json
        required: true
      responses:
        '200':
          description: Successful result contains a JWT
          content:
            application/json:
              schema:
                $ref: ../schemas/auth/jwt_response.json
              example:
                $ref: ../schemas/auth/jwt_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/login':
    post:
      operationId: login
      summary: Login with username and password
      description: Log user in with username and password.
      tags:
        - Auth

      # This can be called without JWT, or with an `anonymous` JWT claim.
      security:
        - {}
        - jwt_logged_in: []

      requestBody:
        description: Logged-in JWT request
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/login_request.json
            example:
              $ref: ../schemas/auth/login_request.example.json
        required: true
      responses:
        '200':
          description: Successful login result contains a JWT
          content:
            application/json:
              schema:
                $ref: ../schemas/auth/login_response.json
              example:
                $ref: ../schemas/auth/login_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/user':
    post:
      operationId: user
      summary: Create a new user
      description: Creates a new user.
      tags:
        - Auth

      # When calling this without JWT (or without a `userAdmin` JWT claim), the created user will only be allowed to have a single JWT claim called `active`.
      # When calling this with a `userAdmin` JWT claim, the created user will be allowed all requested JWT claims.
      security:
        - {}
        - jwt_logged_in: []

      requestBody:
        description: Creating a new user
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/create_user_request.json
            example:
              $ref: ../schemas/auth/create_user_request.example.json
        required: true
      responses:
        '201':
          description: Successful user creation
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/email':
    put:
      operationId: update_email
      summary: Update user email.
      description: Update user email.
      tags:
        - Auth

      requestBody:
        description: Update Email
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/update_email_request.json
            example:
              $ref: ../schemas/auth/update_email_request.example.json
        required: true
      responses:
        '200':
          description: Successful email update result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/password':
    put:
      operationId: update_password
      summary: Update user password.
      description: Update user password.
      tags:
        - Auth

      requestBody:
        description: Update Password
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/update_password_request.json
            example:
              $ref: ../schemas/auth/update_password_request.example.json
        required: true
      responses:
        '200':
          description: Successful password update result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/verify':
    get:
      operationId: verify_email
      summary: Verify user email.
      description: Verify user email.
      tags:
        - Auth

      # While we are creating a new user, we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      parameters:
        - in: query
          name: uuid
          schema:
            type: string
          description: The uuid of the user verifying their email
      responses:
        '200':
          description: Successful email verification
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/forgot-password':
    get:
      operationId: forgot_password
      summary: Trigger forgot password flow.
      description: Trigger forgot password flow.
      tags:
        - Auth

      # While we are creating a new user, we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: The email of the user resetting their password
      responses:
        '200':
          description: Successful password update result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/echo':
    post:
      operationId: echo
      summary: Simple echo request
      description: Simple echo request.
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/echo/echo_request.json
            example:
              $ref: ../schemas/echo/echo_request.example.json
        description: Simple echo request
        required: true
      responses:
        '200':
          description: Simple echo response
          content:
            application/json:
              schema:
                $ref: ../schemas/echo/echo_response.json
              example:
                $ref: ../schemas/echo/echo_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/content':
    get:
      operationId: content_list
      summary: List content
      description: List content.
      tags:
        - Content
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: page_size
          in: query
          description: Number of items on a page
          required: true
          schema:
            type: integer
        - name: category
          in: query
          description: Content category
          required: false
          schema:
            type: string
            enum:
              - all
              - video
              - audio
              - vr
              - pdf
              - digital-publications
              - talks
              - performances
              - cultural-teachings

              # Hack to get the Frontend loading for MVP
              - featured
            default: all
        - name: type
          in: query
          description: Content type
          required: false
          schema:
            type: string
            enum:
              - video
              - audio
              - pdf
            default: video
        - name: nation
          in: query
          description: Related to Nation/Country
          required: false
          schema:
            type: string
            enum:
              - CA
            default: CA
        - name: creator
          in: query
          description: Created by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/list_response.json
              example:
                $ref: ../schemas/content/list_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    post:
      operationId: add_content
      summary: Add content
      description: Add content.
      tags:
        - ContentFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/content/add_content_request.json
            example:
              $ref: ../schemas/content/add_content_request.example.json
        description: Add content
        required: true
      responses:
        '200':
          description: Add content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/add_content_response.json
              example:
                $ref: ../schemas/content/add_content_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/content/{contentId}':
    get:
      operationId: content_details
      summary: Get content details
      description: Get content details.
      tags:
        - Content
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content details
          content:
            application/json:
              schema:
                $ref: ../schemas/content/detail_response.json
              example:
                $ref: ../schemas/content/detail_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/upload/video-tus-reservation':
    post:
      operationId: upload_video_tus_endpoint
      summary: TUS "endpoint" to upload URL from Cloudflare
      description: This (and not it's return value!) has to be given directly to the TUS client as it's `endpoint` parameter.
      tags:
        - Upload
      parameters:
        - name: upload-length
          in: header
          description: Upload Length
          required: true
          schema:
            type: string
        - name: upload-metadata
          in: header
          description: Upload Metadata
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Location:
              schema:
                type: string
              description: Tus upload url received from cloudflare.
            CUBE-File-Id:
              schema:
                type: string
              description: File ID associated with the Tus upload url received from cloudflare.
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/upload/s3-presigned-url':
    post:
      operationId: upload_files_via_presigned_url
      summary: Get S3 / R2 presigned url from Cloudflare
      description: Get S3 / R2 presigned url from Cloudflare
      tags:
        - Upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/upload/s3_presigned_url_request.json
            example:
              $ref: ../schemas/upload/s3_presigned_url_request.example.json
        description: Add content
        required: true
      responses:
        '200':
          description: Add content
          content:
            application/json:
              schema:
                $ref: ../schemas/upload/s3_presigned_url_response.json
              example:
                $ref: ../schemas/upload/s3_presigned_url_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/files/{fileId}':
    get:
      operationId: file_details
      summary: Get file details
      description: Get file details.
      tags:
        - Files
      parameters:
        - name: fileId
          in: path
          description: File ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File details
          content:
            application/json:
              schema:
                $ref: ../schemas/files/detail_response.json
              example:
                $ref: ../schemas/files/detail_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/profiles/{profileId}':
    get:
      operationId: profile_details
      summary: Get profile details
      description: Get profile details.
      tags:
        - Profile
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Profile details
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/detail_response.json
              example:
                $ref: ../schemas/profiles/detail_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    put:
      operationId: profile_section_update
      summary: Update Profile section
      description: Update Profile section.
      tags:
        - Profile
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/profiles/update_section_request.json
            example:
              $ref: ../schemas/profiles/update_section_request.example.json
        description: Profile Section Update
        required: true
      responses:
        '200':
          description: Update Profile Section Response
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/update_section_response.json
              example:
                $ref: ../schemas/profiles/update_section_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/profiles/{profileId}/update-logo':
    post:
      operationId: profile_logo_update
      summary: Update Profile logo
      description: Update Profile logo.
      tags:
        - Profile
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/profiles/update_logo_request.json
            example:
              $ref: ../schemas/profiles/update_logo_request.example.json
        description: Profile Logo Update
        required: true
      responses:
        '200':
          description: Update Profile Logo Response
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/update_logo_response.json
              example:
                $ref: ../schemas/profiles/update_logo_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/profiles/{profileId}/update-audio-description':
    post:
      operationId: profile_audio_description_update
      summary: Update Profile audio description
      description: Update Profile audio description.
      tags:
        - Profile
      parameters:
        - name: profileId
          in: path
          description: Profile ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/profiles/update_audio_description_request.json
            example:
              $ref: ../schemas/profiles/update_audio_description_request.example.json
        description: Profile audio description Update
        required: true
      responses:
        '200':
          description: Update Profile audio description Response
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/update_audio_description_response.json
              example:
                $ref: ../schemas/profiles/update_audio_description_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/collaborators':
    get:
      operationId: collaborator_list
      summary: List collaborators
      description: List collaborators.
      tags:
        - Content
      responses:
        '200':
          description: Collaborator List
          content:
            application/json:
              schema:
                $ref: ../schemas/collaborators/list_response.json
              example:
                $ref: ../schemas/collaborators/list_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

components:
  responses:
    error400:
      description: Error 400
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.400.json
    error401:
      description: Error 401
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.401.json
    error403:
      description: Error 403
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.403.json
    error404:
      description: Error 404
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.404.json
    error405:
      description: Error 405
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.405.json
    error406:
      description: Error 406
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.406.json
    error422:
      description: Error 422
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.422.json
    error429:
      description: Error 429
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.429.json
    error500:
      description: Error 500
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.500.json
    error503:
      description: Error 503
      content:
        application/problem+json:
          schema:
            $ref: ../schemas/common/error.json
          example:
            $ref: ../schemas/common/error.example.503.json

  securitySchemes:
    jwt_logged_in:
      type: http
      description: This API uses JWT. Either anonymous JWT or logged-in JWT via username and password.
      scheme: bearer
      bearerFormat: JWT
