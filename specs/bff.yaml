openapi: 3.0.3
info:
  title: BFF - The Association for Cube Commons Canada

  # BEWARE: This is just a placeholder and will be set by the package publishing scripts.
  # In general, use semantic versioning: http://semver.org/
  version: '0.0.1'
  
  description: |
    # BFF (Backend-for-Frontend)

    The BFF API caters to each and every whim of the Frontend,
    i.e. it receives, bundles, packages and formats data exactly
    as the Frontend needs it.

    The actual implementation of the BFF will then in turn translate
    the Frontend traffic into whatever the specialized and semantically
    modular "real" backend services understand.

  contact:
    email: tech@cubecommons.ca
    url: https://github.com/cubeca
  license:
    name: UNLICENSED
    url: https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license

tags:
  - name: Auth
    description: Login, forgot password, etc.
  - name: Profile
    description: Profile stuff
  - name: Content
    description: Content (e.g. videos, pdfs, audio, etc)
  - name: Files
    description: Everything to do with files, but only *after* they have been uploaded
  - name: Upload
    description: All communications to do with uploading
  - name: Bff
    description: BFF (Backend-for-Frontend) API

servers:
  - url: https://bff-{stage}.cubecommons.ca
    description: CUBE's shared API server instances, including production
    variables:
      stage:
        enum:
          # # DEV, UNSTABLE and STAGING are stages in the development environment
          - dev
          - unstable
          # - staging

          # # Both SANDBOX and LIVE are stages in the production environment
          # - sandbox
          # - live
        default: dev
        description: deployment stage

  - url: http://localhost:{port}
    description: Local development
    variables:
      port:
        enum:
          - '8084'
          - '18084'
        default: '8084'

security: 
  - jwt_logged_in: []

paths:
  '/upload/video-tus-reservation':
    $ref: ./cloudflare-microservice.yaml#/paths/~1upload~1video-tus-reservation

  '/upload/s3-presigned-url':
    $ref: ./cloudflare-microservice.yaml#/paths/~1upload~1s3-presigned-url

  '/files/{fileId}':
    $ref: ./cloudflare-microservice.yaml#/paths/~1files~1{fileId}

  '/content':
    $ref: ./content-microservice.yaml#/paths/~1content

  '/content/{contentId}':
    $ref: ./content-microservice.yaml#/paths/~1content~1{contentId}

  '/auth/user':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1user

  '/auth/login':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1login

  '/auth/anonymous':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1anonymous

  '/auth/email':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1email

  '/auth/password':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1password

  '/auth/email/verify/{token}':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1email~1verify~1{token}

  '/auth/forgot-password':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1forgot-password

  '/auth/resend-email-verification':
    $ref: ./identity-microservice.yaml#/paths/~1auth~1resend-email-verification

  '/profiles':
    $ref: ./profile-microservice.yaml#/paths/~1profiles

  '/profiles/{profileId}':
    $ref: ./profile-microservice.yaml#/paths/~1profiles~1{profileId}

  '/collaborators':
    get:
      operationId: collaborators
      summary: get a list of collaborators
      description: get a list of collaborators
      tags:
        - Profile
      responses:
        '200':
          description: get a list of collaborators
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/bff_collaborators_response.json
              example:
                $ref: ../schemas/profiles/bff_collaborators_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
  
  '/search':
    get:
      operationId: search
      summary: Search based on query parameters
      description: Returns search results based on the provided query parameters.
      tags:
        - Bff
      parameters:
        - name: offset
          in: query
          description: Offset into the result set
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Max number of items to return
          required: false
          schema:
            type: integer
        - name: searchTerm
          in: query
          description: term to look for in data
          required: true
          schema:
            type: string
        - name: filters
          in: query
          description: Filters for which content is returned
          required: false
          schema:
            $ref: ../schemas/bff/search_filters.json
      responses:
        '200':
          description: search results
          content:
            application/json:
              schema:
                $ref: ../schemas/bff/search_response.json
              example:
                $ref: ../schemas/bff/search_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/profiles/tag/{tag}':
    parameters:
      - name: tag
        in: path
        description: Profile tag
        required: true
        schema:
          type: string
    get:
      operationId: get_profile_by_tag
      summary: Get profile details by tag
      description: Get profile details by tag.
      tags:
        - Profile
      responses:
        '200':
          description: Profile details
          content:
            application/json:
              schema:
                $ref: ../schemas/profiles/bff_get_profile_by_tag_response.json
              example:
                $ref: ../schemas/profiles/bff_get_profile_by_tag_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

components:
  responses:
    success200:
      $ref: './_partials/common-components.yaml#/responses/success200'
    error400:
      $ref: './_partials/common-components.yaml#/responses/error400'
    error401:
      $ref: './_partials/common-components.yaml#/responses/error401'
    error403:
      $ref: './_partials/common-components.yaml#/responses/error403'
    error404:
      $ref: './_partials/common-components.yaml#/responses/error404'
    error405:
      $ref: './_partials/common-components.yaml#/responses/error405'
    error406:
      $ref: './_partials/common-components.yaml#/responses/error406'
    error422:
      $ref: './_partials/common-components.yaml#/responses/error422'
    error429:
      $ref: './_partials/common-components.yaml#/responses/error429'
    error500:
      $ref: './_partials/common-components.yaml#/responses/error500'
    error503:
      $ref: './_partials/common-components.yaml#/responses/error503'

  securitySchemes:
    jwt_logged_in:
      $ref: './_partials/common-components.yaml#/securitySchemes/jwt_logged_in'
