openapi: 3.0.3
info:
  title: Identity Microservice - The Association for Cube Commons Canada

  # BEWARE: This is just a placeholder and will be set by the package publishing scripts.
  # In general, use semantic versioning: http://semver.org/
  version: '0.0.1'
  
  description: |
    # Identity Microservice

    The Identity Microservice is the custodian of User Identities.

    Since it's dealing with Passwords and PII, it should 
    not concern itself with anything else, to keep it simple and less error-prone.

  contact:
    email: tech@cubecommons.ca
    url: https://github.com/cubeca
  license:
    name: UNLICENSED
    url: https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license

tags:
  - name: Auth
    description: Login, forgot password, etc.

servers:
  # No public URL available.

  - url: http://localhost:{port}
    description: Local development
    variables:
      port:
        enum:
          - '8082'
          - '18082'
        default: '8082'

security: 
  - jwt_logged_in: []

paths:
  '/auth/anonymous':
    post:
      operationId: anonymous_JWT
      summary: Acquire a JWT as an anonymous user.
      description: Acquire a JWT as an anonymous user.
      tags:
        - Auth

      # While we are logging in we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      requestBody:
        description: Anonymous JWT request
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/anonymous_jwt_request.json
            example:
              $ref: ../schemas/auth/anonymous_jwt_request.example.json
        required: true
      responses:
        '200':
          description: Successful result contains a JWT
          content:
            application/json:
              schema:
                $ref: ../schemas/auth/jwt_response.json
              example:
                $ref: ../schemas/auth/jwt_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/login':
    post:
      operationId: login
      summary: Login with email and password
      description: Log user in with username and password.
      tags:
        - Auth

      # This can be called without JWT, or with an `anonymous` JWT claim.
      security:
        - {}
        - jwt_logged_in: []

      requestBody:
        description: Logged-in JWT request
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/login_request.json
            example:
              $ref: ../schemas/auth/login_request.example.json
        required: true
      responses:
        '200':
          description: Successful login result contains a JWT
          content:
            application/json:
              schema:
                $ref: ../schemas/auth/login_response.json
              example:
                $ref: ../schemas/auth/login_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/user':
    post:
      operationId: user
      summary: Create a new user
      description: Creates a new user.
      tags:
        - Auth

      # When calling this without JWT (or without a `userAdmin` JWT claim), the created user will only be allowed to have a single JWT claim called `active`.
      # When calling this with a `userAdmin` JWT claim, the created user will be allowed all requested JWT claims.
      security:
        - {}
        - jwt_logged_in: []

      requestBody:
        description: Creating a new user
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/create_user_request.json
            example:
              $ref: ../schemas/auth/create_user_request.example.json
        required: true
      responses:
        '201':
          description: Successful user creation
          content:
            application/json:
              schema:
                $ref: ../schemas/auth/create_user_response.json
              example:
                $ref: ../schemas/auth/create_user_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/email':
    put:
      operationId: update_email
      summary: Update user email.
      description: Update user email.
      tags:
        - Auth

      requestBody:
        description: Update Email
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/update_email_request.json
            example:
              $ref: ../schemas/auth/update_email_request.example.json
        required: true
      responses:
        '200':
          description: Successful email update result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/password':
    put:
      operationId: update_password
      summary: Update user password.
      description: Update user password.
      tags:
        - Auth

      requestBody:
        description: Update Password
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/update_password_request.json
            example:
              $ref: ../schemas/auth/update_password_request.example.json
        required: true
      responses:
        '200':
          description: Successful password update result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/email/contact-us':
    put:
      operationId: contact_us
      summary: send an email when the contact us form is filled out.
      description: send an email when the contact us form is filled out.
      tags:
        - Auth

      requestBody:
        description: Send an email when the contact us form is filled out.
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/contact_us_request.json
            example:
              $ref: ../schemas/auth/contact_us_request.example.json
        required: true
      responses:
        '200':
          description: Successful sent an email
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/email/verify/{token}':
    get:
      operationId: verify_email
      summary: Verify user email.
      description: Verify user email.
      tags:
        - Auth

      # While we are creating a new user, we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      parameters:
        - name: token
          in: path
          description: token
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Successful email verification
          headers:
            Location:
              schema:
                type: string
                example: /verify?token=token_value
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/forgot-password':
    post:
      operationId: forgot_password
      summary: Trigger forgot password flow.
      description: Trigger forgot password flow.
      tags:
        - Auth

      # While we are creating a new user, we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      requestBody:
        description: Email to trigger reset process
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/forgot_password_request.json
            example:
              $ref: ../schemas/auth/forgot_password_request.example.json
        required: true
      responses:
        '200':
          description: Successful password update result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/auth/resend-email-verification':
    post:
      operationId: resend-email-verification
      summary: resend the email verification if previous one lapsed.
      description: resend the email verification if previous one lapsed.
      tags:
        - Auth

      # While we are logging in we are not yet authenticated,
      # so we have to allow for "no auth" by overriding the
      # global "security" setting with a local empty one.
      security: []

      requestBody:
        description: resend email verification request
        content:
          application/json:
            schema:
              $ref: ../schemas/auth/resend_email_verification_request.json
            example:
              $ref: ../schemas/auth/resend_email_verification_request.example.json
        required: true
      responses:
        '200':
          description: Successful resend verification email result
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '406':
          $ref: '#/components/responses/error406'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

components:
  responses:
    error400:
      $ref: './_partials/common-components.yaml#/responses/error400'
    error401:
      $ref: './_partials/common-components.yaml#/responses/error401'
    error403:
      $ref: './_partials/common-components.yaml#/responses/error403'
    error404:
      $ref: './_partials/common-components.yaml#/responses/error404'
    error405:
      $ref: './_partials/common-components.yaml#/responses/error405'
    error406:
      $ref: './_partials/common-components.yaml#/responses/error406'
    error422:
      $ref: './_partials/common-components.yaml#/responses/error422'
    error429:
      $ref: './_partials/common-components.yaml#/responses/error429'
    error500:
      $ref: './_partials/common-components.yaml#/responses/error500'
    error503:
      $ref: './_partials/common-components.yaml#/responses/error503'

  securitySchemes:
    jwt_logged_in:
      $ref: './_partials/common-components.yaml#/securitySchemes/jwt_logged_in'
