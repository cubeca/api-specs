openapi: 3.0.3
info:
  title: Content Microservice - The Association for Cube Commons Canada

  # BEWARE: This is just a placeholder and will be set by the package publishing scripts.
  # In general, use semantic versioning: http://semver.org/
  version: '0.0.1'
  
  description: |
    # Content Microservice

    The Content Microservice is the "custodian" of "content pieces", which are usually one main media file,
    tied together with some supporting files like thumbnail, sign language video, subtitles, etc.
    plus some metadata like title, description, owner profile etc.

  contact:
    email: tech@cubecommons.ca
    url: https://github.com/cubeca
  license:
    name: UNLICENSED
    url: https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license

tags:
  - name: Content
    description: Content (e.g. videos, pdfs, audio, etc)

servers:
  # No public URL available.

  - url: http://localhost:{port}
    description: Local development
    variables:
      port:
        enum:
          - '8081'
          - '18081'
        default: '8081'

security: 
  - jwt_logged_in: []

paths:

  '/':
    get:
      operationId: content_status
      summary: Content service status
      description: Check the run status of the content service
      tags:
        - Content
      responses:
        '200':
          description: Status of content service
          $ref: '#/components/responses/success200'
        '500':
          $ref: '#/components/responses/error500'

  '/content':
    get:
      operationId: get_content_by_profileid
      summary: Get content by profile Id
      description: Get content by profile Id
      tags:
        - Content
      parameters:
        - name: offset
          in: query
          description: Offset into the result set
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Max number of items to return
          required: true
          schema:
            type: integer
        - name: profileId
          in: query
          description: ID of profile to return content for
          required: true
          schema:
            type: string
            format: uuid
        - name: filters
          in: query
          description: Filters for which content is returned
          required: false
          schema:
            $ref: ../schemas/content/filters.json
      responses:
        '200':
          description: List of content with optionally applied filters
          content:
            application/json:
              schema:
                $ref: ../schemas/content/get_content_by_profileid_response.json
              example:
                $ref: ../schemas/content/get_content_by_profileid_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    post:
      operationId: add_content
      summary: Add content
      description: Add content.
      tags:
        - Content
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/content/add_content_request.json
            example:
              $ref: ../schemas/content/add_content_request.example.json
        description: Add content
        required: true
      responses:
        '200':
          description: Add content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/add_content_response.json
              example:
                $ref: ../schemas/content/add_content_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

  '/content/{contentId}':
    get:
      operationId: get_content
      summary: Get content details
      description: Get content details.
      tags:
        - Content
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content details
          content:
            application/json:
              schema:
                $ref: ../schemas/content/get_content_response.json
              example:
                $ref: ../schemas/content/get_content_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    post:
      operationId: update_content
      summary: Update content
      description: Update content.
      tags:
        - Content
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/content/update_content_request.json
            example:
              $ref: ../schemas/content/update_content_request.example.json
        description: Update content
        required: true
      responses:
        '200':
          description: Update content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/update_content_response.json
              example:
                $ref: ../schemas/content/update_content_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'
    delete:
      operationId: delete_content
      summary: Delete content
      description: Delete content.
      tags:
        - Content
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete content
          content:
            application/json:
              schema:
                $ref: ../schemas/content/delete_content_response.json
              example:
                $ref: ../schemas/content/delete_content_response.example.json
        '400':
          $ref: '#/components/responses/error400'
        '401':
          $ref: '#/components/responses/error401'
        '403':
          $ref: '#/components/responses/error403'
        '404':
          $ref: '#/components/responses/error404'
        '405':
          $ref: '#/components/responses/error405'
        '406':
          $ref: '#/components/responses/error406'
        '422':
          $ref: '#/components/responses/error422'
        '429':
          $ref: '#/components/responses/error429'
        '500':
          $ref: '#/components/responses/error500'
        '503':
          $ref: '#/components/responses/error503'

components:
  responses:
    success200:
      $ref: './_partials/common-components.yaml#/responses/success200'
    error400:
      $ref: './_partials/common-components.yaml#/responses/error400'
    error401:
      $ref: './_partials/common-components.yaml#/responses/error401'
    error403:
      $ref: './_partials/common-components.yaml#/responses/error403'
    error404:
      $ref: './_partials/common-components.yaml#/responses/error404'
    error405:
      $ref: './_partials/common-components.yaml#/responses/error405'
    error406:
      $ref: './_partials/common-components.yaml#/responses/error406'
    error422:
      $ref: './_partials/common-components.yaml#/responses/error422'
    error429:
      $ref: './_partials/common-components.yaml#/responses/error429'
    error500:
      $ref: './_partials/common-components.yaml#/responses/error500'
    error503:
      $ref: './_partials/common-components.yaml#/responses/error503'

  securitySchemes:
    jwt_logged_in:
      $ref: './_partials/common-components.yaml#/securitySchemes/jwt_logged_in'
